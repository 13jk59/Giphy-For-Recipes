{"version":3,"sources":["components/NavBar.js","components/Recipes.js","components/SearchBar.js","components/Favourites.js","Redux/reduxUtility.js","api_utils/fetchRandom.js","Redux/reducers/favouritesPageReducer.js","Redux/reducers/favouritesUtilityFunctions/addToFavouritesReducer.js","Redux/reducers/favouritesUtilityFunctions/removeFromFavouritesReducer.js","grid_utils/grid_utils.js","Redux/reducers/homePageUtilityFunctions/requestSearchPostsReducer.js","Redux/reducers/homePageUtilityFunctions/removeSearchResultsReducer.js","Redux/reducers/homePageReducer.js","Redux/reducers/homePageUtilityFunctions/recievePostsReducer.js","Redux/reducers/homePageUtilityFunctions/requestPostsReducer.js","Redux/reducers/homePageUtilityFunctions/recieveSearchPostsReducer.js","Redux/reducers/rootReducer.js","Redux/store.js","Redux/action creators/fetchRandomPosts.js","Redux/action creators/requestPosts.js","Redux/action creators/recievePosts.js","Redux/action creators/recieveSearchPosts.js","api_utils/fetchSearch.js","Redux/action creators/fetchSearchRecipes.js","Redux/action creators/requestSearchPosts.js","components/App.js","React-Redux-maps/mapStateToProps.js","React-Redux-maps/mapDispatchToProps.js","Redux/action creators/addToFavourites.js","Redux/action creators/removeFromFavourites.js","Redux/action creators/removeSearchResults.js","components/AppWrapper.js","serviceWorker.js","index.js"],"names":["NavBar","props","id","to","Recipes","_addWindowEventListener","bind","_windowEventListener","this","items","length","fetchRandomPosts","_addAllGridsToGridHolder","_addClickEventListenerStar","_updateStarStatus","document","getElementById","addHoverToAllAnchorLinks","gridHolder","grid","appendChild","lastGrid","lastGridAdded","querySelectorAll","forEach","starWrapper","addEventListener","_starIconClickHandler","getElementsByTagName","prevProps","_addLastGridToGridHolder","removeEventListener","window","isFetching","showingSearch","innerHeight","documentElement","scrollTop","offsetHeight","React","Component","SearchBar","_submitClickHandler","_backClickHandler","_unMountStarClickListener","searchResultHolder","children","removeSearchResults","e","searchedForText","value","passedInText","textContent","searchForRecipe","for","type","name","placeholder","Favourites","scrollTo","_addFavouritedGridCellsToGrid","obj","favourites","size","createElement","className","favouritesHolder","i","gridCell","createReducer","initialState","handlers","state","action","hasOwnProperty","fetch","require","fetchRandom","then","data","json","map_actionType_function","ADD_TO_FAVOURITES","returnObj","Map","keys","gridId","set","get","cloneNode","postId","post","classList","REMOVE_FROM_FAVOURITES","delete","favouritesPageReducer","makeNewGrid","gridCellsGrid","new_grid","numGridCellsGrid","div","addImgDescrTitle","star_div","star","style","zIndex","marginRight","marginTop","transform","createStar","cursor","height","createStarWrapper","createStarIcon","recipe_descr_div","img_recipe_descr_div","descr_title","position","bottom","createDescrTitleForGridCell","img_div","img","width","createImgDivForGridCell","holder_p_anchorLinks","recipeSourceLink","target","recipeYTLink","recipe_title","spacing_div","fontFamily","args","textDecoration","color","fontSize","styleAnchorLinks","addChildrenTo","configureDescriptionInfo","createRecipeDescrDiv","container","child","addHoverToLinks","addInfoToGridCell","meal","idMeal","img_thumbnail","recipeTitle","strSource","strYT","add","img_gridCell","titleRecipe","src","innerHTML","href","addInfoToNodes","strMealThumb","strMeal","strYoutube","homePageReducer","lastUpdated","RECIEVE_POSTS","newItems","push","Object","assign","newGridAdded","newGridChildren","meals","removeChild","lastChild","receivedAt","REQUEST_POSTS","REQUEST_SEARCH_POSTS","spinnerHolder","spinner","display","searchBarSpinnerDiv","RECIEVE_SEARCH_POSTS","arrayOfMeals","posts","searchHolder","totalMeals","idxGridChild","entries","mealsFoundReducer","REMOVE_SEARCH_RESULTS","rootReducer","combineReducers","homePage","loggerMiddleware","createLogger","reduxStore","createStore","applyMiddleware","ThunkMiddleware","dispatch","addSpinnerDiv","getState","Promise","all","Date","now","recievePosts","text","fetchSearch","App","iconObj","has","anchorLinks","closest","potentialPost","gridCellsStarsAddOrRemove","removeFromFavourites","getElementsByClassName","addToFavourites","path","render","connectedComponent","connect","AppWrapper","store","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e13b8b62.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from \"react-router-dom\";\n  \n\n/**\n * This function represents a react functional component, which has the responsibility of \n * rendering the NavBar for the website. \n */\nfunction NavBar(props) {\n    return (\n        <div id = \"navbar_info\">\n            <h2>Recipe Paradise</h2>\n            <div id = \"routes\">\n                <Link to = \"/\" id = \"Home\">Home</Link>\n                <Link to = \"/favourites\" id = \"Favourites\">Favourites</Link>\n            </div>\n        </div>\n    )\n}\n\n\nexport default NavBar; ","import { icon } from '@fortawesome/fontawesome-svg-core';\nimport React from 'react';\n\n/**\n * This component is responsible for displaying recipes on the home route. This component will be mounted\n * automatically when the website loads, and will dispatch a request to get data from the api and template\n * the returned data within grid cells. This component also implements infinite scrolling, meaning more recipes \n * will be loaded onto the page as the user scrolls to the bottom of the page. \n * @class @public \n */\nclass Recipes extends React.Component{\n    constructor(props) {\n        super(props);\n        this._addWindowEventListener = this._addWindowEventListener.bind(this);\n        this._windowEventListener = this._windowEventListener.bind(this);\n    }\n\n\n    componentDidMount() {\n        // Adding event listener to the window because we want to automatically go and \n        // get new data if we scroll past a certain point - infinite scrolling \n        // should be disabled for favourites route though \n        this._addWindowEventListener();\n        // if no items stored in the state, fetch some and make first grid only if we aren't already fetching\n        // if you have items to display, display them \n        if (this.props.items.length === 0) {\n            this.props.fetchRandomPosts();\n        }\n        if (this.props.items.length > 0) {\n            this._addAllGridsToGridHolder(); \n            this._addClickEventListenerStar(); \n            // we allow the favourites status to be updated on the favourites page as well, so just check\n            // here which elements are favourited and which are not and color stars accordingly\n            this.props._updateStarStatus(document.getElementById('gridHolder')); \n            this.props.addHoverToAllAnchorLinks(); \n        }\n    }\n\n    /**\n     * This method is used to add every single div held currently in the state to the grid holder.\n     */\n    _addAllGridsToGridHolder() {\n        // needed when component is re-mounted when coming back from a different route \n        const gridHolder = document.getElementById('gridHolder');\n        for (let grid of this.props.items) {\n            gridHolder.appendChild(grid); \n        }\n    }\n\n    /**\n     * This method adds a grid to the grid holder. Used mainly to implement infinite scrolling, to add\n     * the newest grid created to the grid holder. \n     * @param {HTMLElement} lastGrid The new grid to be added to the grid holder. \n     */\n    _addLastGridToGridHolder(lastGrid) {\n        const gridHolder = document.getElementById('gridHolder');\n        gridHolder.appendChild(lastGrid); \n    }\n\n    /**\n     * This method adds an event listener to the star icon. The event listener is added to the star icon either for \n     * every single grid displayed on the page, or just for the icon elements nested within the dom node passed as an\n     * argument to the function. \n     * \n     *  \n     * @param {HTMLElement} lastGridAdded If null, indicates we need to add event listener for every single icon node\n     * on the page. If not null, new grid was added with infinite scrolling, so we have to add this event listener \n     * for just the icon elements within the last grid.\n     */\n    _addClickEventListenerStar(lastGridAdded = null) {\n        // This method should have two different behaviours\n        // One behaviour accounts for infinite scrolling\n        // For inf scrolling, lastGridAdded will be provided \n        // and only that grid should recieve the event listener\n        // If the component is remounting after returning after a route however, event listeners should be \n        // provided to every single icon element \n        if (!lastGridAdded) {\n            [...document.getElementsByTagName('i')].forEach((starWrapper) => {\n                starWrapper.addEventListener('click', this.props._starIconClickHandler);\n            });\n        }\n        else {\n            [...lastGridAdded.querySelectorAll('i')].forEach((starWrapper) => {\n                starWrapper.addEventListener('click', this.props._starIconClickHandler); \n            });\n        } \n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.items.length !== this.props.items.length) {\n            // only add the star event listener to the last grid added\n            let lastGridAdded = this.props.items[this.props.items.length-1]; \n            this._addLastGridToGridHolder(lastGridAdded); \n            this._addClickEventListenerStar(lastGridAdded); \n            this.props.addHoverToAllAnchorLinks(); \n           }\n    }\n\n    componentWillUnmount() {\n        [...document.getElementsByTagName('i')].forEach((starWrapper) => {\n            starWrapper.removeEventListener('click', this._starIconClickHandler);\n        }) \n\n        window.removeEventListener('scroll', this._windowEventListener);\n    }\n\n    _addWindowEventListener() {\n        window.addEventListener('scroll',this._windowEventListener);\n    }\n\n    /**\n     * This method is the event listener for the window object for the scroll event, which is how\n     * infinite scrolling is implemented. Basically, we get the current distance the user is from the \n     * top of the page, and if that is greater than or equal to the height of the page, then we dispatch\n     * a redux thunk to the redux store to update the state with a new grid of posts. \n     */\n    _windowEventListener() {\n        // account for fact we could be fetching data right now or we're currently showing\n        // searched for items \n        if (this.props.isFetching || this.props.showingSearch) {\n            return;\n        }\n        const currentHeightOfPage = window.innerHeight + document.documentElement.scrollTop +1;\n        if (currentHeightOfPage>= document.documentElement.offsetHeight) {\n            this.props.fetchRandomPosts(); \n        }\n    }\n\n    render() {\n        return(\n            <div id = \"recipe_holder\">\n                <div id = \"gridHolder\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Recipes; ","import { icon } from '@fortawesome/fontawesome-svg-core';\nimport React from 'react';\n\n\n/**\n * This class represents a React component responsible for rendering the section of the UI displaying\n * the SearchBar. \n * \n * @class @public \n */\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props); \n        this._submitClickHandler = this._submitClickHandler.bind(this); \n        this._backClickHandler = this._backClickHandler.bind(this); \n        this._unMountStarClickListener = this._unMountStarClickListener.bind(this);\n    }\n\n    componentDidMount() {\n        document.getElementById('submit_search').addEventListener('click', this._submitClickHandler);\n        document.getElementById('backOffSearch').addEventListener('click', this._backClickHandler);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.showingSearch) {\n            const searchResultHolder = document.getElementById('searchResultHolder');\n            for (const grid of searchResultHolder.children) {\n                for (const gridCell of grid.children) {\n                    const icon = gridCell.querySelectorAll('i')[0]; \n                    icon.addEventListener('click', this.props._starIconClickHandler);\n                    // items can be starred already coming in from the homepage -- account for that  \n                    this.props._updateStarStatus(document.getElementById('searchResultHolder'));\n                }\n            }\n            this.props.addHoverToAllAnchorLinks(); \n        }\n    }\n\n    componentWillUnmount() {\n        document.getElementById('submit_search').removeEventListener('click', this._submitClickHandler);\n        document.getElementById('backOffSearch').removeEventListener('click', this._backClickHandler);\n        // we can click to go from searched results to the favourites tab, therefore we need to make sure that\n        // showing search is false \n        this.props.removeSearchResults(); \n        this._unMountStarClickListener(); \n    }\n\n    _unMountStarClickListener() {\n        if (this.props.showingSearch) {\n            const searchResultHolder = document.getElementById('searchResultHolder');\n            for (let grid of searchResultHolder.children) {\n                for (let gridCell of grid.children) {\n                    const iconElement = gridCell.querySelectorAll('i')[0];\n                    iconElement.removeEventListener('click', this.props._starIconClickHandler);\n                }\n            }\n        }\n    }\n\n    _backClickHandler(e) {\n        document.getElementById('submit_search').addEventListener('click', this._submitClickHandler);\n        this.props.removeSearchResults(); \n    }\n\n    _submitClickHandler(e) {\n        const searchedForText = document.getElementById('search_query').value;\n        const passedInText = (searchedForText ? searchedForText: 'empty');\n        // delete any nodes stored in searchHolder - complete refresh of element \n        document.getElementById('searchResultHolder').textContent = ''; \n        this.props.searchForRecipe(passedInText); \n        // after we've dispatched action, don't want to be able to keep clicking the search button and dispatching action over\n        // and over again so disable event listener until back button is pressed\n        document.getElementById('submit_search').removeEventListener('click', this._submitClickHandler);\n    }\n\n    render() {\n        return(\n            <div id = \"search_bar\">\n                <div id = \"mainSearch\">\n                    <label for = 'search'></label>\n                    <input type = \"text\" id = \"search_query\" name = \"search\" placeholder=\"Search for recipes...\"></input>\n                    <button id = \"submit_search\">Search</button>\n                </div>\n                <button id = \"backOffSearch\">Go Back</button>\n                <div id =\"searchResultHolder\"></div> \n            </div>\n        )\n    }\n}\n\nexport default SearchBar; ","import React from 'react';\nimport {connect} from 'react-redux';\n\n/**\n * This class represents a React Component responsible for rendering and handling the logic for the favourites\n * section of the UI. \n * \n * @class @public \n */\nclass Favourites extends React.Component {\n   constructor(props) {\n       super(props);\n   }\n\n   componentDidMount() {\n       // every time component is mounted, scroll the window to the beginning \n       window.scrollTo(0,0); \n       this._addFavouritedGridCellsToGrid();\n       this.props.addHoverToAllAnchorLinks(); \n   }\n\n   componentWillUnmount() {\n       // remove the event listeners registered on every single recipe in the favourite grid \n        [...document.getElementsByTagName('i')].forEach((obj) => {\n            obj.removeEventListener('click', this.props._starIconClickHandler);\n        }) \n   }\n\n   componentDidUpdate(prevProps) {\n       if (this.props.favourites.size !== prevProps.favourites.size) {\n           document.getElementById('favouritesHolder').textContent = '';  \n           this._addFavouritedGridCellsToGrid(); \n           // add hover effect to all the anchor tags \n           this.props.addHoverToAllAnchorLinks(); \n       }\n   }\n\n   /**\n    * This method represents a function responsible for adding recipes the user has favourited to the \n    * CSS grid contained in this component. The favourited grid cells are contained within the state\n    * stored in the redux store, which this component recieves in the this.props object. \n    */\n   _addFavouritedGridCellsToGrid() {\n       // 9 grid cells per grid \n       let grid = document.createElement('div');\n       grid.className = 'grid'; \n       let favouritesHolder = document.getElementById('favouritesHolder');\n       let i = 0;\n       for (let gridCell of this.props.favourites) {\n           // every 9 grid cells we add the grid we just created\n           // to the favourites holder, and then create a new grid and repeat\n           // until finished with all of the favourites items \n           if (i > 0 && i%9 === 0) {\n               favouritesHolder.appendChild(grid);\n               grid = document.createElement('div');\n               grid.className = 'grid';\n           }\n           gridCell[1].querySelectorAll('i')[0].className = 'fas fa-star'; \n           grid.appendChild(gridCell[1]);  \n           i++;\n       }\n       // whatever the last grid is, add it to the favourites holder if there are children\n       // in it \n       if (grid.children.length > 0) {\n           favouritesHolder.appendChild(grid); \n       }\n       [...document.getElementsByTagName('i')].forEach((obj) => {\n        obj.addEventListener('click', this.props._starIconClickHandler);\n        })\n   }\n    \n    render() {\n        return(\n            <div id = \"favouritesHolder\"></div>\n        )\n    }\n}\n\nexport default Favourites;  ","// constant for spinner \nexport const REQUEST_POSTS = \"REQUEST_POSTS\"; \n\nexport const REQUEST_SEARCH_POSTS = \"REQUEST_SEARCH_POSTS\";\n\n// constant for when data recieved from api\nexport const RECIEVE_POSTS = \"RECIEVE_POSTS\"; \n\n// starring post adds it to favourites\nexport const ADD_TO_FAVOURITES = \"ADD_TO_FAVOURITES\";\n\n// removing post removes it from favourites\nexport const REMOVE_FROM_FAVOURITES = \"REMOVE_FROM_FAVOURITES\"; \n\nexport const RECIEVE_SEARCH_POSTS = \"RECIEVE_SEARCH_POSTS\"; \n\nexport const REMOVE_SEARCH_RESULTS = \"REMOVE_SEARCH_RESULTS\"; \n\n// Create Reducer pure function\nexport function createReducer(initialState, handlers) {\n    return function reducer(state = initialState, action) {\n      if (handlers.hasOwnProperty(action.type)) {\n        return handlers[action.type](state, action);\n      } \n      else {\n        return state;\n      }\n   }\n}\n","const fetch = require(\"node-fetch\");\nfunction fetchRandom() {\n  return fetch(\"https://www.themealdb.com/api/json/v1/1/random.php\").then(data => data.json());\n}\n\nexport default fetchRandom; ","import {createReducer, ADD_TO_FAVOURITES, REMOVE_FROM_FAVOURITES} from '../reduxUtility';\nimport addToFavouritesReducer from './favouritesUtilityFunctions/addToFavouritesReducer';\nimport removeFromFavouritesReducer from './favouritesUtilityFunctions/removeFromFavouritesReducer';\n\n\n// Object contains mapping from action types to handler functions which return new state objects in response\n// to actions. Removes the need for many switch/case statements when used in conjuction with createReducer\nconst map_actionType_function = {\n    ADD_TO_FAVOURITES: addToFavouritesReducer,\n    REMOVE_FROM_FAVOURITES: removeFromFavouritesReducer\n};\n\n// only state contained here is an object which will contain mappings between grid cell id's (strings) \n// and the grid cells themselves \nconst favourited = new Map(); \n\nexport const favouritesPageReducer = createReducer(favourited, map_actionType_function);\n\n\n","export default function addToFavouritesReducer(state, action) {\n    let returnObj = new Map(); \n    for (const gridId of state.keys()) {\n        returnObj.set(gridId, state.get(gridId).cloneNode(true)); \n    }\n    // add new post object to the new state \n    const postId = action.post.classList[action.post.classList.length-1];\n    returnObj.set(postId, action.post); \n    return returnObj; \n}\n","export default function removeFromFavouritesReducer(state, action) {\n    let returnObj = new Map(); \n    // copy old state to new state in a pure fashionn\n    for (const gridId of state.keys()) {\n        returnObj.set(gridId, state.get(gridId).cloneNode(true)); \n    }\n    // remove the deleted node from the object\n    const postId = action.post.classList[action.post.classList.length-1]; \n    returnObj.delete(postId); \n    return returnObj; \n}\n\n","function makeNewGrid(gridCellsGrid = null) {\n    const new_grid = document.createElement('div');\n    new_grid.className = \"grid\";\n    let numGridCellsGrid = (gridCellsGrid === null ? 9: gridCellsGrid);\n    for (let i=0; i<numGridCellsGrid; i++) {\n        const div = document.createElement('div');\n        addImgDescrTitle(div);\n        new_grid.appendChild(div);\n    }\n    return new_grid; \n}\n\nfunction addImgDescrTitle(obj) {\n    const star_div = createStarIcon();\n    const recipe_descr_div = createRecipeDescrDiv(); \n    obj.appendChild(star_div);\n    obj.appendChild(recipe_descr_div);\n    obj.className = 'gridCell'; \n}\n\nfunction createStarIcon() {\n    const star_div = document.createElement('div');\n    star_div.id = 'star_div'; \n    const star = createStar(); \n    const starWrapper = createStarWrapper(); \n    // need a star wrapper in order to have the cursor being pointer\n    // when its being hovered \n    starWrapper.appendChild(star);\n    star_div.appendChild(starWrapper);\n    return star_div;\n}\n\nfunction createStar() {\n    const star = document.createElement('i');\n    star.style.zIndex = -1; \n    star.id = 'star';\n    star.className = \"far fa-star\";\n    star.style.marginRight = '10px';\n    star.style.marginTop = '10px';\n    star.style.transform = 'scale(1.35)'\n    return star; \n}\n\nfunction createStarWrapper() {\n    const starWrapper = document.createElement('div');\n    starWrapper.className = 'starWrapper';\n    starWrapper.style.cursor = 'pointer'; \n    starWrapper.style.height = '20px';\n    starWrapper.style.zIndex = 2;\n    return starWrapper; \n}\n\nfunction createRecipeDescrDiv() {\n    const img_recipe_descr_div = document.createElement('div');\n    img_recipe_descr_div.id = 'recipe_descr_div';\n    const descr_title = createDescrTitleForGridCell(); \n    const img_div = createImgDivForGridCell(); \n    const holder_p_anchorLinks = configureDescriptionInfo(); \n    addChildrenTo(descr_title, holder_p_anchorLinks); \n    img_recipe_descr_div.appendChild(img_div);\n    img_recipe_descr_div.appendChild(descr_title);\n    return img_recipe_descr_div; \n}\n\nfunction createDescrTitleForGridCell() {\n    const descr_title = document.createElement('div');\n    descr_title.id = 'descr_title';\n    descr_title.style.position = 'relative';\n    descr_title.style.bottom = '15px';\n    return descr_title; \n}\n\nfunction createImgDivForGridCell() {\n    const img_div = document.createElement('div');\n    img_div.id = \"img_div\";\n    const img = document.createElement('img');\n    img.className = 'recipeImgs'; \n    img_div.appendChild(img); \n    img.style.height = '260px';\n    img.style.width = '100%';\n    return img_div; \n}\n\nfunction addChildrenTo(container, ...args) {\n    for (let child of args) {\n        container.appendChild(child); \n    }\n}\n\nfunction configureDescriptionInfo() {\n    const recipeSourceLink = document.createElement('a');\n    recipeSourceLink.target = \"_blank\";\n    const recipeYTLink = document.createElement('a'); \n    recipeYTLink.target = \"_blank\";\n    const recipe_title = document.createElement('h2');\n    // need a spacing div in order to exact a margin between the two anchor links\n    // setting margin bot directly on anchor link doesn't give desired result \n    const spacing_div = document.createElement('div'); \n    spacing_div.style.height = '20px'; \n    recipe_title.style.fontFamily = \"Dosis\";\n\n\n    styleAnchorLinks(recipeYTLink, recipeSourceLink);\n\n    const holder_p_anchorLinks = document.createElement('div');\n    addChildrenTo(holder_p_anchorLinks,recipe_title, recipeSourceLink, spacing_div, recipeYTLink);\n\n    return holder_p_anchorLinks;\n}\n\nfunction styleAnchorLinks(...args) {\n    for (const obj of args) {\n        obj.style.textDecoration = 'none';\n        obj.style.fontFamily = \"Dosis\";\n        obj.style.color = 'rgb(245, 209,250)';\n        obj.style.fontSize = '17px';\n    }\n}\n\nfunction addSpinnerDiv() {\n    const spinnerHolder = document.createElement('div');\n    spinnerHolder.id = \"spinnerHolder\"; \n    const spinner = document.createElement('div');\n    spinner.className = 'loader';\n    spinnerHolder.appendChild(spinner); \n    const gridHolder = document.getElementById(\"gridHolder\");\n    gridHolder.appendChild(spinnerHolder); \n}\n\nfunction searchBarSpinnerDiv() {\n    const spinnerHolder = document.createElement('div');\n    spinnerHolder.id = \"spinnerHolder\"; \n    const spinner = document.createElement('div');\n    spinner.className = 'loader';\n    spinnerHolder.appendChild(spinner); \n\n    const searchResultHolder = document.getElementById('searchResultHolder');\n    searchResultHolder.style.display = 'block'; \n    document.getElementById('gridHolder').style.display = 'none'; \n    searchResultHolder.appendChild(spinnerHolder); \n}\n\nfunction addHoverToLinks(obj) {\n    obj.addEventListener('mouseover', function(e) {\n        e.target.style.textDecoration = 'underline';\n    });\n\n    obj.addEventListener('mouseout', (e) => {\n        e.target.style.textDecoration = 'none'\n    });\n}\n\nfunction addInfoToNodes(obj, img_thumbnail, recipeTitle, strSource, strYT, idMeal) {\n    obj.classList.add(idMeal); \n    const img_gridCell = obj.querySelectorAll('.recipeImgs')[0];\n    const titleRecipe = obj.querySelectorAll('h2')[0];\n    const recipeSourceLink = obj.querySelectorAll('a')[0]; \n    const recipeYTLink = obj.querySelectorAll('a')[1];\n\n    img_gridCell.src = img_thumbnail;\n    titleRecipe.innerHTML = recipeTitle; \n    //txt nodes to add to paragraph elements\n    if (strSource) {\n        recipeSourceLink.href = strSource; \n        recipeSourceLink.innerHTML = 'Click me to find out more information about this recipe!'\n    }\n    recipeYTLink.href = strYT;\n    if (strYT) {\n        recipeYTLink.innerHTML = 'Click me to find out more information about this recipe in video format!'\n    }\n\n    if (!strSource && !strYT) {\n        recipeSourceLink.innerHTML = 'No further information about this recipe available'\n    }\n}\n\n\nfunction addInfoToGridCell(gridCell, meal) {\n    const idMeal = meal.idMeal; \n    const img_thumbnail = meal.strMealThumb; \n    const recipeTitle = meal.strMeal; \n    const strSource = meal.strSource;\n    const strYT = meal.strYoutube; \n    addInfoToNodes(gridCell, img_thumbnail, recipeTitle, strSource, strYT, idMeal); \n}\n\n\n\n\n\nexport {makeNewGrid, addHoverToLinks ,addImgDescrTitle, addSpinnerDiv,createRecipeDescrDiv, createStarIcon, searchBarSpinnerDiv, addInfoToGridCell};","import {searchBarSpinnerDiv} from '../../../grid_utils/grid_utils';\n\nexport default function(state, action) {\n    searchBarSpinnerDiv(); \n    document.getElementById('mainSearch').style.display = 'none';\n    document.getElementById('backOffSearch').style.display = 'block'; \n    return Object.assign({}, state); \n}","export default function(state, action) {\n    document.getElementById('mainSearch').style.display = 'flex';\n    document.getElementById('backOffSearch').style.display = 'none'; \n    document.getElementById('gridHolder').style.display = 'block'; \n    document.getElementById('searchResultHolder').style.display = 'none'; \n    return Object.assign({}, state, {showingSearch:false});\n}","import {createReducer} from '../reduxUtility';\nimport {RECIEVE_POSTS, REQUEST_POSTS, REQUEST_SEARCH_POSTS, RECIEVE_SEARCH_POSTS, REMOVE_SEARCH_RESULTS} from '../reduxUtility';\nimport recievePostsReducer from './homePageUtilityFunctions/recievePostsReducer';\nimport requestPostsReducer from './homePageUtilityFunctions/requestPostsReducer';\nimport requestSearchPostsReducer from './homePageUtilityFunctions/requestSearchPostsReducer';\nimport recieveSearchPostsReducer from './homePageUtilityFunctions/recieveSearchPostsReducer';\nimport removeSearchResultsReducer from './homePageUtilityFunctions/removeSearchResultsReducer';\n\nconst INIT_STATE = {\n    isFetching: false,\n    lastUpdated: null,\n    items: [],\n    showingSearch: false \n}; \n\n// Object contains mapping from action types to handler functions which return new state objects in response\n// to actions. Removes the need for many switch/case statements when used in conjuction with createReducer\nconst map_actionType_toFunctions = {\n    RECIEVE_POSTS: recievePostsReducer,\n    REQUEST_POSTS: requestPostsReducer,\n    REQUEST_SEARCH_POSTS: requestSearchPostsReducer,\n    RECIEVE_SEARCH_POSTS: recieveSearchPostsReducer,\n    REMOVE_SEARCH_RESULTS: removeSearchResultsReducer\n}\n\nexport const homePageReducer = createReducer(INIT_STATE, map_actionType_toFunctions); \n","import {makeNewGrid, addSearchInfoGrid, addInfoToGridCell} from '../../../grid_utils/grid_utils';\nexport default function recievePostsReducer(state, action) {\n    const newItems = [];\n    for (const grid of state.items) {\n        newItems.push(grid.cloneNode(true)); \n    }\n    const gridHolder = document.getElementById('gridHolder');\n    // if we don't detect a gridHolder on the DOM, that means we can't carry through with the update\n    // thus return the original state\n    if (gridHolder == null) {\n        return Object.assign({}, state, {isFetching:false}); \n    }\n    const newGridAdded = makeNewGrid();\n    const newGridChildren = newGridAdded.children;\n    for (let i=0; i<9; i++) {\n        let gridCell = newGridChildren[i];\n        let meal = action.data[i].meals[0];\n        addInfoToGridCell(gridCell, meal);\n    }\n    // Remove the spinner - if we get to this point, it is guaranteed to be the last\n    // element in the grid holder \n    gridHolder.removeChild(gridHolder.lastChild);\n    newItems.push(newGridAdded); \n    return Object.assign({}, \n        {isFetching: false, lastUpdated: action.receivedAt, items: newItems, showingSearch: false}\n    );\n}\n\n","export default function requestPostsReducer(state, action) {\n    return Object.assign({}, state, {isFetching:true});\n}\n\n","import {makeNewGrid, addInfoToGridCell} from '../../../grid_utils/grid_utils';\n\nexport default function (state, action) {\n    let arrayOfMeals = action.posts.meals; \n    let searchHolder = document.getElementById('searchResultHolder');\n    // whether or not match is found, we will always remove the spinner because\n    // we're not in process of fetching data \n    searchHolder.removeChild(document.getElementById('spinnerHolder'));\n    // means that no match was found for search so just return \n    if (arrayOfMeals === null) {\n        return Object.assign({}, state, {showingSearch: true}); \n    }\n    return mealsFoundReducer(arrayOfMeals, state, searchHolder);\n}\n\nfunction mealsFoundReducer(arrayOfMeals, state, searchHolder) {\n    let totalMeals= arrayOfMeals.length;\n    let numGridCellsGrid = (totalMeals >= 9 ? null: totalMeals); \n    let grid = makeNewGrid(numGridCellsGrid); \n    let idxGridChild = 0; \n    let mealIds = 97;\n    for (let [i, meal] of arrayOfMeals.entries()) {\n        // grid is 3x3, if the current grid is filled up create a new grid \n        if (i !== 0 && i%9 === 0) {\n            numGridCellsGrid = (totalMeals >= 9 ? null: totalMeals); \n            searchHolder.appendChild(grid);\n            grid = makeNewGrid(numGridCellsGrid); \n            idxGridChild = 0; \n        }\n        addInfoToGridCell(grid.children[idxGridChild], meal); \n        totalMeals--; \n        idxGridChild++; \n        mealIds++; \n    }\n    searchHolder.appendChild(grid); \n    return Object.assign({}, state, {showingSearch: true}); \n}","import {combineReducers} from 'redux';\nimport {favouritesPageReducer} from './favouritesPageReducer';\nimport {homePageReducer} from './homePageReducer';\n\n\nexport const rootReducer = combineReducers({\n    favourites: favouritesPageReducer,\n    homePage: homePageReducer\n});\n\n","import {createStore, applyMiddleware} from 'redux';\nimport {rootReducer} from './reducers/rootReducer';\nimport ThunkMiddleware from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\n\n\n\nconst loggerMiddleware = createLogger(); \nexport const reduxStore = createStore(rootReducer, \n    applyMiddleware(\n        ThunkMiddleware,\n        loggerMiddleware\n    )\n); \n","import requestPosts from './requestPosts';\nimport recievePosts from './recievePosts';\nimport fetchRandom from '../../api_utils/fetchRandom';\nimport {reduxStore} from '../store'; \nimport {addSpinnerDiv} from '../../grid_utils/grid_utils';\n\n// thunk action creator\n// needed as we are making call to api to fetch data \nexport default function fetchRandomPosts() {\n    // instead of returning action object, return a function that takes\n    // dispatch as an argument. Thunk middleware is used in the Redux \n    // store to handle these thunks\n    return function(dispatch) {\n        // if we're already in the midst of a call, dont dispatch another call to api to get data\n        addSpinnerDiv(); \n        if (reduxStore.getState().homePage.isFetching) {\n            return; \n        }\n        dispatch(requestPosts());\n        // make 9 calls to get 9 recipes \n        return Promise.all([\n            fetchRandom(),\n            fetchRandom(), \n            fetchRandom(),\n\n            fetchRandom(),\n            fetchRandom(), \n            fetchRandom(),\n\n            fetchRandom(),\n            fetchRandom(), \n            fetchRandom(),\n        ]).then(data => {\n            dispatch(recievePosts(data));\n        }); \n    }\n}\n\n","import {REQUEST_POSTS} from '../reduxUtility';\n\nexport default function requestPosts() {\n    return {\n        type: REQUEST_POSTS\n    }\n}\n\n","import {RECIEVE_POSTS} from '../reduxUtility';\n\n\nexport default function recievePosts(data) {\n    return {\n        type: RECIEVE_POSTS, \n        data,\n        receivedAt: Date.now() \n    }\n}\n","import {RECIEVE_SEARCH_POSTS} from '../reduxUtility';\n\nexport default function(posts) {\n    return {\n        type: RECIEVE_SEARCH_POSTS,\n        posts \n    }\n}\n\n","const fetch = require(\"node-fetch\");\n\nexport default function(text) {\n    return fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${text}`).then(data => data.json());\n}","import requestSearchPosts from './requestSearchPosts';\nimport recieveSearchPosts from './recieveSearchPosts';\nimport fetchSearch from '../../api_utils/fetchSearch';\n\n\nexport default function(text) {\n    return function(dispatch) {\n        dispatch(requestSearchPosts()); \n        fetchSearch(text).then(data => dispatch(recieveSearchPosts(data))); \n    }\n}","import {REQUEST_SEARCH_POSTS} from '../reduxUtility';\n\nexport default function requestSearchPosts() {\n    return {\n        type: REQUEST_SEARCH_POSTS\n    }\n}\n\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport NavBar from './NavBar';\nimport Recipes from './Recipes';\nimport SearchBar from './SearchBar';\nimport Favourites from './Favourites';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport '../stylesheets/App.css'\nimport mapStateToProps from '../React-Redux-maps/mapStateToProps';\nimport mapDispatchToProps from '../React-Redux-maps/mapDispatchToProps';\nimport {addHoverToLinks} from '../grid_utils/grid_utils';\n\n\n/**\n * This is the primary component for the application, which wraps all the individual children\n * components and contains the logic for the routing. This component is connected with the redux store\n * and passes down action creators and state from the redux store into children components through props.\n * \n * @class @public\n */\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n\n    this._starIconClickHandler = this._starIconClickHandler.bind(this); \n    this._updateStarStatus = this._updateStarStatus.bind(this); \n  }\n\n\n  /**\n   * Method that will be passed down as a prop into multiple wrapped components. Purpose of method is to\n   * render the correctversion of a star within the component, related to whether the grid cell is \n   * favourited or not. \n   * @param {HTMLElement} gridHolder Dom Node that holds all of the grid cells for the current component. \n   */\n  _updateStarStatus(gridHolder) {\n    for (let grid of gridHolder.children) {\n        for (let gridCell of grid.children) {\n            let iconObj = gridCell.querySelectorAll('i')[0]; \n            const postId = gridCell.classList[gridCell.classList.length-1];\n            if (!this.props.favourites.has(postId)) {\n                iconObj.className = 'far fa-star';\n            }\n            else {\n                iconObj.className = 'fas fa-star';\n            }\n        }\n    }\n  }\n\n  addHoverToAllAnchorLinks() {\n    [...document.querySelectorAll('.gridCell')].forEach((obj) => {\n        const anchorLinks = obj.querySelectorAll('a');\n        for (const link of anchorLinks) {\n            addHoverToLinks(link); \n        }\n    });\n  }\n\n  _starIconClickHandler(e) {\n    let iconStar = e.target;\n    // if the user clicks directly on star, the e will be the icon and not the wrapper, which is\n    // what we want it to be. Cloning this to keep everything bug-free\n    let gridCell = e.target.closest('.gridCell');\n    const potentialPost = gridCell.cloneNode(true); \n    // we will check if the post is already in the favourites if it is,\n    // then that means we are removing this from the favourites\n    // and the star icon should go from filled to unfilled. Otherwise, if the post is not\n    // in the favourites, then that means star icon goes from unfilled to filled and gets added\n    // to the favourites if the user clicks directly on star, the e will be the icon and not \n    //the wrapper, which is what we want it to be\n    const gridCellsStarsAddOrRemove = gridCell.classList[gridCell.classList.length-1];\n    if (this.props.favourites.has(gridCellsStarsAddOrRemove)) {\n        this.props.removeFromFavourites(potentialPost); \n        // since there can be multiple elements with the same id (ie we can have repeats of the same item)\n        // get every single item with this id and remove the star from each of them \n        [...document.getElementsByClassName(gridCellsStarsAddOrRemove)].forEach((obj) => {\n          const objStarIcon = obj.querySelectorAll('i')[0];\n          objStarIcon.className = 'far fa-star';\n        })\n    }\n    else {\n        this.props.addToFavourites(potentialPost); \n        [...document.getElementsByClassName(gridCellsStarsAddOrRemove)].forEach((obj) => {\n          const objStarIcon = obj.querySelectorAll('i')[0];\n          objStarIcon.className = 'fas fa-star';\n        })\n    }\n}\n  render() {\n    return(\n      <div id = \"App\">\n        <Router>\n            <Switch>\n              <Route\n                path=\"/favourites\"\n                render={(props) => (\n                  <div>\n                    <NavBar />\n                    <div id = \"spacing_div\"></div>\n\n                    <Favourites \n                    {...props} \n                    favourites = {this.props.favourites} \n                    addToFavourites = {this.props.addToFavourites} \n                    removeFromFavourites = {this.props.removeFromFavourites}\n                    _starIconClickHandler = {this._starIconClickHandler}\n                    addHoverToAllAnchorLinks = {this.addHoverToAllAnchorLinks}\n                    /> \n                  </div>\n                )}></Route>\n\n              <Route\n              path=\"/\"\n              render={(props) => (\n                <div>\n                  <NavBar />\n                  <div id = \"spacing_div\"></div>\n\n                  <SearchBar \n                  {...props} \n                  showingSearch = {this.props.showingSearch}\n                  searchForRecipe = {this.props.searchForRecipe}\n                  removeSearchResults = {this.props.removeSearchResults} \n                  addToFavourites = {this.props.addToFavourites}\n                  removeFromFavourites = {this.props.removeFromFavourites}\n                  favourites = {this.props.favourites} \n                  _starIconClickHandler = {this._starIconClickHandler}\n                  _updateStarStatus = {this._updateStarStatus}\n                  addHoverToAllAnchorLinks = {this.addHoverToAllAnchorLinks}\n                  /> \n\n                  <Recipes \n                  {...props} \n                  items = {this.props.items} \n                  isFetching = {this.props.isFetching} \n                  favourites = {this.props.favourites} \n                  addToFavourites = {this.props.addToFavourites} \n                  removeFromFavourites = {this.props.removeFromFavourites}\n                  fetchRandomPosts = {this.props.fetchRandomPosts}\n                  _starIconClickHandler = {this._starIconClickHandler}\n                  showingSearch = {this.props.showingSearch}\n                  _updateStarStatus = {this._updateStarStatus}\n                  addHoverToAllAnchorLinks = {this.addHoverToAllAnchorLinks} \n                  /> \n\n                </div>\n              )}></Route>\n\n            </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n\nlet connectedComponent = connect(mapStateToProps, mapDispatchToProps)(App); \n\nexport {connectedComponent as App}; \n","export default function(state) {\n    return {\n        isFetching: state.homePage.isFetching,\n        lastUpdated: state.homePage.lastUpdated,\n        items: state.homePage.items,\n        favourites: state.favourites,\n        showingSearch: state.homePage.showingSearch\n    }\n}\n","import addToFavourites from '../Redux/action creators/addToFavourites';\nimport removeFromFavourites from '../Redux/action creators/removeFromFavourites';\nimport fetchRandomPosts from '../Redux/action creators/fetchRandomPosts';\nimport searchForRecipe from '../Redux/action creators/fetchSearchRecipes'; \nimport removeSearchResults from '../Redux/action creators/removeSearchResults';\n\nexport default function(dispatch) {\n    return {\n        addToFavourites: (post) => dispatch(addToFavourites(post)),\n        removeFromFavourites: (post) => dispatch(removeFromFavourites(post)),\n        fetchRandomPosts: () => dispatch(fetchRandomPosts()),\n        searchForRecipe: (text) => dispatch(searchForRecipe(text)),\n        removeSearchResults: () => dispatch(removeSearchResults())\n    }\n}","import {ADD_TO_FAVOURITES} from \"../reduxUtility\";\n\n// Synchronous action creator - no api call here\n\nexport default function addToFavourites(post) {\n    return {\n        type: ADD_TO_FAVOURITES,\n        post\n    }\n}","import {REMOVE_FROM_FAVOURITES} from \"../reduxUtility\";\n\nexport default function removeFromFavourites(post) {\n    return {\n        type: REMOVE_FROM_FAVOURITES,\n        post\n    }\n}\n","import {REMOVE_SEARCH_RESULTS} from '../reduxUtility';\nexport default function() {\n    return {\n        type: REMOVE_SEARCH_RESULTS\n    }\n}","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {App} from './App'; \nimport {reduxStore} from '../Redux/store';\nimport '../stylesheets/App.css';\n\n\n/**\n * This function serves as a wrapper for the app in order to provide the redux store to\n * the application. \n */\nfunction AppWrapper() {\n  return (\n      <Provider store = {reduxStore}>\n          <App /> \n      </Provider>\n  );\n}\n\nexport default AppWrapper; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppWrapper from './components/AppWrapper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}